697. Degree of an Array
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.

class Solution(object):
    def findShortestSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        degree = 0
        num_map = {}
        for i,num in enumerate(nums):
            if num not in num_map:
                num_map[num] = [i,i,1]
            else:
                num_map[num][1] = i
                num_map[num][2] += 1
                degree = max(degree, num_map[num][2])  # track max frequency

        min_len = len(nums)
        for arr in num_map.values():
            if arr[2] == degree:
                min_len = min(min_len, arr[1] - arr[0] + 1)

        return min_len        
